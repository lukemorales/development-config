const baseStyleRules = require("eslint-config-airbnb-base/rules/style").rules;

const dangleRules = baseStyleRules["no-underscore-dangle"];

/** @type {import('@types/eslint').Linter.Config} */
module.exports = {
  extends: [
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:react/jsx-runtime",
    "plugin:react-redux/recommended",
    "plugin:storybook/recommended",
  ],
  plugins: ["jsx-a11y", "react", "react-redux", "react-hooks"],
  parserOptions: { ecmaFeatures: { jsx: true } },
  settings: {
    react: {
      pragma: "React",
      version: "detect",
    },
    propWrapperFunctions: [
      "forbidExtraProps", // https://www.npmjs.com/package/airbnb-prop-types
      "exact", // https://www.npmjs.com/package/prop-types-exact
      "Object.freeze", // https://tc39.github.io/ecma262/#sec-object.freeze
    ],
  },
  rules: {
    "no-underscore-dangle": [
      dangleRules[0],
      {
        ...dangleRules[1],
        allow: dangleRules[1].allow.concat([
          "__REDUX_DEVTOOLS_EXTENSION_COMPOSE__",
        ]),
      },
    ],

    "class-methods-use-this": [
      "error",
      {
        exceptMethods: [
          "render",
          "getInitialState",
          "getDefaultProps",
          "getChildContext",
          "componentWillMount",
          "UNSAFE_componentWillMount",
          "componentDidMount",
          "componentWillReceiveProps",
          "UNSAFE_componentWillReceiveProps",
          "shouldComponentUpdate",
          "componentWillUpdate",
          "UNSAFE_componentWillUpdate",
          "componentDidUpdate",
          "componentWillUnmount",
          "componentDidCatch",
          "getSnapshotBeforeUpdate",
        ],
      },
    ],

    "jsx-quotes": ["error", "prefer-double"],
    "react/display-name": "off",
    "react/forbid-prop-types": "off",
    "react/forbid-dom-props": "off",
    "react/jsx-boolean-value": ["error", "never", { always: [] }],
    "react/jsx-closing-bracket-location": ["error", "line-aligned"],
    "react/jsx-closing-tag-location": "error",
    "react/jsx-curly-spacing": ["error", "never", { allowMultiline: true }],
    "react/jsx-handler-names": [
      "off",
      {
        eventHandlerPrefix: "handle",
        eventHandlerPropPrefix: "on",
      },
    ],
    "react/jsx-indent-props": ["error", 2],
    "react/jsx-key": "off",
    "react/jsx-max-props-per-line": [
      "error",
      { maximum: 1, when: "multiline" },
    ],
    "react/jsx-no-bind": [
      "error",
      {
        ignoreRefs: true,
        allowArrowFunctions: true,
        allowFunctions: false,
        allowBind: false,
        ignoreDOMComponents: true,
      },
    ],
    "react/jsx-no-duplicate-props": ["error", { ignoreCase: true }],
    "react/jsx-no-literals": ["off", { noStrings: true }],
    "react/jsx-no-undef": "error",
    "react/jsx-pascal-case": ["error", { allowAllCaps: true, ignore: [] }],
    "react/sort-prop-types": [
      "off",
      {
        ignoreCase: true,
        callbacksLast: false,
        requiredFirst: false,
        sortShapeProp: true,
      },
    ],
    "react/jsx-sort-prop-types": "off",
    "react/jsx-sort-default-props": [
      "off",
      {
        ignoreCase: true,
      },
    ],
    "react/jsx-uses-react": ["error"],
    "react/jsx-uses-vars": "error",
    "react/no-danger": "warn",
    "react/no-deprecated": ["error"],
    "react/no-did-mount-set-state": "off",
    "react/no-did-update-set-state": "error",
    "react/no-will-update-set-state": "error",
    "react/no-direct-mutation-state": "off",
    "react/no-is-mounted": "error",
    "react/no-multi-comp": "off",
    "react/no-set-state": "off",
    "react/no-string-refs": "error",
    "react/no-unknown-property": "error",
    "react/prefer-es6-class": ["error", "always"],
    "react/prefer-stateless-function": [
      "error",
      { ignorePureComponents: true },
    ],
    "react/prop-types": [
      "error",
      {
        ignore: [],
        customValidators: [],
        skipUndeclared: false,
      },
    ],
    "react/react-in-jsx-scope": "error",
    "react/require-render-return": "error",
    "react/self-closing-comp": "error",
    "react/sort-comp": [
      "error",
      {
        order: [
          "static-variables",
          "static-methods",
          "instance-variables",
          "lifecycle",
          "/^handle.+$/",
          "/^on.+$/",
          "getters",
          "setters",
          "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
          "instance-methods",
          "everything-else",
          "rendering",
        ],
        groups: {
          lifecycle: [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "getInitialState",
            "state",
            "getChildContext",
            "getDerivedStateFromProps",
            "componentWillMount",
            "UNSAFE_componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "UNSAFE_componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "UNSAFE_componentWillUpdate",
            "getSnapshotBeforeUpdate",
            "componentDidUpdate",
            "componentDidCatch",
            "componentWillUnmount",
          ],
          rendering: ["/^render.+$/", "render"],
        },
      },
    ],
    "react/jsx-wrap-multilines": [
      "error",
      {
        declaration: "parens-new-line",
        assignment: "parens-new-line",
        return: "parens-new-line",
        arrow: "parens-new-line",
        condition: "parens-new-line",
        logical: "parens-new-line",
        prop: "parens-new-line",
      },
    ],
    "react/jsx-first-prop-new-line": ["error", "multiline-multiprop"],
    "react/jsx-equals-spacing": ["error", "never"],
    "react/jsx-indent": ["error", 2],
    "react/jsx-no-target-blank": ["error", { enforceDynamicLinks: "always" }],
    "react/jsx-filename-extension": ["error", { extensions: [".jsx"] }],
    "react/jsx-no-comment-textnodes": "error",
    "react/no-render-return-value": "error",
    "react/require-optimization": ["off", { allowDecorators: [] }],
    "react/no-find-dom-node": "error",
    "react/forbid-component-props": ["off", { forbid: [] }],
    "react/forbid-elements": ["off", { forbid: [] }],
    "react/no-danger-with-children": "error",
    "react/no-unused-prop-types": [
      "error",
      {
        customValidators: [],
        skipShapeProps: true,
      },
    ],
    "react/style-prop-object": "error",
    "react/no-unescaped-entities": "error",
    "react/no-children-prop": "error",
    "react/jsx-tag-spacing": [
      "error",
      {
        closingSlash: "never",
        beforeSelfClosing: "always",
        afterOpening: "never",
        beforeClosing: "never",
      },
    ],
    "react/jsx-space-before-closing": ["off", "always"],
    "react/no-array-index-key": "error",
    "react/require-default-props": "off",
    "react/forbid-foreign-prop-types": "off",
    "react/void-dom-elements-no-children": "error",
    "react/default-props-match-prop-types": "off",
    "react/no-redundant-should-component-update": "error",
    "react/no-unused-state": "error",
    "react/boolean-prop-naming": "off",
    "react/no-typos": "error",
    "react/jsx-curly-brace-presence": [
      "error",
      { props: "never", children: "never", propElementValues: "always" },
    ],
    "react/jsx-one-expression-per-line": ["error", { allow: "single-child" }],
    "react/destructuring-assignment": ["error", "always"],
    "react/no-access-state-in-setstate": "error",
    "react/button-has-type": [
      "error",
      { button: true, submit: true, reset: false },
    ],
    "react/jsx-child-element-spacing": "off",
    "react/no-this-in-sfc": "error",
    "react/jsx-max-depth": "off",
    "react/jsx-props-no-multi-spaces": "error",
    "react/no-unsafe": "off",
    "react/jsx-fragments": ["error", "syntax"],
    "react/jsx-curly-newline": [
      "error",
      { multiline: "consistent", singleline: "consistent" },
    ],
    "react/state-in-constructor": ["error", "always"],
    "react/static-property-placement": ["error", "property assignment"],
    "react/prefer-read-only-props": "off",
    "react/jsx-no-script-url": ["error", [{ name: "Link", props: ["to"] }]],
    "react/jsx-no-useless-fragment": "error",
    "react/no-adjacent-inline-elements": "error",
    "react/jsx-newline": "error",
    "react/jsx-no-constructed-context-values": "error",
    "react/no-unstable-nested-components": "error",
    "react/no-namespace": "error",
    "react/prefer-exact-props": "error",
    "react/no-arrow-function-lifecycle": "error",
    "react/no-invalid-html-attribute": "error",
    "react/no-unused-class-component-methods": "error",
    "react/hook-use-state": "error",
    "react/iframe-missing-sandbox": "error",
    "react/jsx-no-leaked-render": ["error", { validStrategies: ["coerce"] }],
    "react/no-object-type-as-default-prop": "error",
    "react/sort-default-props": "off",
    "react/function-component-definition": [
      "error",
      {
        namedComponents: "arrow-function",
        unnamedComponents: "arrow-function",
      },
    ],
    "react/boolean-prop-naming": "off",
    "react/hook-use-state": "warn",
    "react/jsx-fragments": ["error", "syntax"],
    "react/jsx-no-constructed-context-values": "error",
    "react/jsx-no-leaked-render": [
      "error",
      { validStrategies: ["coerce", "ternary"] },
    ],
    "react/jsx-no-useless-fragment": ["error", { allowExpressions: true }],
    "react/jsx-one-expression-per-line": "off",
    "react/jsx-props-no-spreading": "off",
    "react/jsx-sort-props": [
      "warn",
      {
        shorthandFirst: true,
        reservedFirst: ["key", "ref", "dangerouslySetInnerHTML"],
        ignoreCase: true,
        multiline: "last",
        noSortAlphabetically: true,
      },
    ],
    "react/no-access-state-in-setstate": "error",
    "react/no-array-index-key": "error",
    "react/no-children-prop": "error",
    "react/jsx-no-bind": [
      "error",
      {
        ignoreDOMComponents: true,
        ignoreRefs: true,
        allowArrowFunctions: true,
        allowFunctions: true,
        allowBind: false,
      },
    ],
    "react/no-multi-comp": "off",
    "react/no-redundant-should-component-update": "off",
    "react/no-this-in-sfc": "off",
    "react/no-typos": "warn",
    "react/no-unsafe": ["error", { checkAliases: false }],
    "react/no-unstable-nested-components": ["error", { allowAsProps: true }],
    "react/no-unused-state": "warn",
    "react/prop-types": "off",
    "react/require-default-props": "off",
    "react/sort-comp": [
      "error",
      {
        order: [
          "static-methods",
          "lifecycle",
          "everything-else",
          "/^(on|handle).+$/",
          "render",
        ],
      },
    ],
    "react/state-in-constructor": "error",
    "react/void-dom-elements-no-children": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": [
      "error",
      { additionalHooks: "^(use).*(Effect)$" },
    ],
    "react-redux/useSelector-prefer-selectors": [
      "error",
      { matching: "^select.*" },
    ],

    // ----------------------------------------------------
    // Accessibility rules
    // ----------------------------------------------------

    "jsx-a11y/accessible-emoji": "off",
    "jsx-a11y/alt-text": [
      "error",
      {
        elements: ["img", "object", "area", 'input[type="image"]'],
        img: [],
        object: [],
        area: [],
        'input[type="image"]': [],
      },
    ],
    "jsx-a11y/anchor-has-content": [
      "error",
      {
        components: [],
      },
    ],
    "jsx-a11y/anchor-is-valid": "off",
    "jsx-a11y/aria-activedescendant-has-tabindex": "error",
    "jsx-a11y/aria-props": "error",
    "jsx-a11y/aria-proptypes": "error",
    "jsx-a11y/aria-role": [
      "error",
      {
        ignoreNonDOM: false,
      },
    ],
    "jsx-a11y/aria-unsupported-elements": "error",
    "jsx-a11y/click-events-have-key-events": "error",
    "jsx-a11y/control-has-associated-label": [
      "error",
      {
        labelAttributes: ["label"],
        controlComponents: [],
        ignoreElements: [
          "audio",
          "canvas",
          "embed",
          "input",
          "textarea",
          "tr",
          "video",
        ],
        ignoreRoles: [
          "grid",
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "row",
          "tablist",
          "toolbar",
          "tree",
          "treegrid",
        ],
        depth: 5,
      },
    ],
    "jsx-a11y/heading-has-content": [
      "error",
      {
        components: [""],
      },
    ],
    "jsx-a11y/html-has-lang": "error",
    "jsx-a11y/iframe-has-title": "error",
    "jsx-a11y/img-redundant-alt": "error",
    "jsx-a11y/interactive-supports-focus": "error",
    "jsx-a11y/lang": "error",
    "jsx-a11y/label-has-associated-control": ["error", { assert: "either" }],
    "jsx-a11y/media-has-caption": [
      "error",
      {
        audio: [],
        video: [],
        track: [],
      },
    ],
    "jsx-a11y/mouse-events-have-key-events": "error",
    "jsx-a11y/no-access-key": "error",
    "jsx-a11y/no-autofocus": [
      "error",
      {
        ignoreNonDOM: true,
      },
    ],
    "jsx-a11y/no-distracting-elements": [
      "error",
      {
        elements: ["marquee", "blink"],
      },
    ],
    "jsx-a11y/no-interactive-element-to-noninteractive-role": [
      "error",
      {
        tr: ["none", "presentation"],
      },
    ],
    "jsx-a11y/no-noninteractive-element-interactions": [
      "error",
      {
        handlers: [
          "onClick",
          "onMouseDown",
          "onMouseUp",
          "onKeyPress",
          "onKeyDown",
          "onKeyUp",
        ],
      },
    ],
    "jsx-a11y/no-noninteractive-element-to-interactive-role": [
      "error",
      {
        ul: [
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "tablist",
          "tree",
          "treegrid",
        ],
        ol: [
          "listbox",
          "menu",
          "menubar",
          "radiogroup",
          "tablist",
          "tree",
          "treegrid",
        ],
        li: ["menuitem", "option", "row", "tab", "treeitem"],
        table: ["grid"],
        td: ["gridcell"],
      },
    ],
    "jsx-a11y/no-noninteractive-tabindex": [
      "error",
      {
        tags: [],
        roles: ["tabpanel"],
      },
    ],
    "jsx-a11y/no-onchange": "off",
    "jsx-a11y/no-redundant-roles": "error",
    "jsx-a11y/no-static-element-interactions": [
      "error",
      {
        handlers: [
          "onClick",
          "onMouseDown",
          "onMouseUp",
          "onKeyPress",
          "onKeyDown",
          "onKeyUp",
        ],
      },
    ],
    "jsx-a11y/role-has-required-aria-props": "error",
    "jsx-a11y/role-supports-aria-props": "error",
    "jsx-a11y/scope": "error",
    "jsx-a11y/tabindex-no-positive": "error",

    // ----------------------------------------------------
    // Rules that no longer exist in eslint-plugin-jsx-a11y
    // ----------------------------------------------------

    "jsx-a11y/label-has-for": "off",
    "jsx-a11y/anchor-ambiguous-text": "off",
    "jsx-a11y/no-aria-hidden-on-focusable": "off",
    "jsx-a11y/prefer-tag-over-role": "off",
  },
  overrides: [
    {
      files: ["*.ts?(x)"],
      globals: {
        React: true,
      },
      rules: {
        "react/prop-types": "off",
        "react/jsx-filename-extension": ["warn", { extensions: [".tsx"] }],
      },
    },
  ],
};
